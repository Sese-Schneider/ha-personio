"""Attendances for the Persionio API."""

from datetime import datetime, timedelta
import logging
import requests
from config.custom_components.personio.api.authentication import Authentication
from config.custom_components.personio.api.base import BASE_URL

_LOGGER = logging.getLogger(__name__)


class Attendances:
    """Attendances for the Persionio API."""

    def __init__(self, authentication: Authentication) -> None:
        self._authentication = authentication

    def add_attendance(
        self,
        employee_id: int,
        start_time: float,
        end_time: float,
        now: datetime,
    ):
        """Add attendances to the Personio API."""

        attendances = []

        start_date = datetime.fromtimestamp(start_time, tz=now.tzinfo)
        end_date = datetime.fromtimestamp(end_time, tz=now.tzinfo)

        for single_date in _daterange(start_date, end_date):
            attendances.append(
                {
                    "employee": employee_id,
                    "date": single_date.strftime("%Y-%m-%d"),
                    "start_time": start_date.strftime("%H:%M")
                    if _is_on_date(start_date, single_date)
                    else "00:00",
                    "end_time": end_date.strftime("%H:%M")
                    if _is_on_date(end_date, single_date)
                    else "23:59",
                    "break": 0,
                    "project_id": None,
                    "comment": "Generated by Sese-Schneider/ha-personio",
                }
            )

        result = requests.post(
            BASE_URL + "/company/attendances",
            headers=self._authentication.get_headers(),
            timeout=10000,
            json={"attendances": attendances},
        )
        result.raise_for_status()
        self._authentication.set_response(result)

        _LOGGER.info("Attendance for employee %s added successfully", employee_id)


def _daterange(start_date: datetime, end_date: datetime):
    start_date = start_date.replace(hour=0, minute=0, second=0, microsecond=0)
    end_date = end_date.replace(hour=0, minute=0, second=0, microsecond=0)
    days = int((end_date - start_date).days)

    for n in range(days + 1):  # pylint: disable=invalid-name
        yield start_date + timedelta(days=n)


def _is_on_date(to_check: datetime, on_date: datetime) -> bool:
    return on_date < to_check < on_date + timedelta(days=1)
